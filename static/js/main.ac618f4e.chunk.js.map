{"version":3,"sources":["components/Header.js","components/SearchBox.js","components/Card.js","components/CardList.js","containers/App.js","serviceWorker.js","index.js"],"names":["Header","Fragment","SearchBox","props","type","className","onChange","onInputChange","placeholder","Card","alt","src","id","name","email","CardList","robots","map","value","key","App","state","searchfield","handleChange","event","setState","target","renderRobots","length","filterRobots","filter","toLowerCase","includes","fetch","then","result","json","data","newRobots","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6TAUeA,G,MARA,WACX,OACI,kBAAC,IAAMC,SAAP,KACI,8CCUGC,G,MAZG,SAACC,GACf,OACI,kBAAC,IAAMF,SAAP,KACI,2BAAQG,KAAK,OACLC,UAAU,YACVC,SAAUH,EAAMI,cAChBC,YAAY,wBCIjBC,G,MAVF,SAACN,GACV,OACI,yBAAKE,UAAU,QACX,yBAAKK,IAAI,QAAQC,IAAG,iCAA4BR,EAAMS,MACtD,uBAAGP,UAAU,QAAQF,EAAMU,MAC3B,uBAAGR,UAAU,SAASF,EAAMW,UCMzBC,G,MAVE,SAACZ,GACd,OACI,yBAAKE,UAAU,aACVF,EAAMa,OAAOC,KAAI,SAAAC,GACd,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAMN,GAAIC,KAAMK,EAAML,KAAMC,MAAOI,EAAMJ,MAAOF,GAAIM,EAAMN,WCoD7EQ,E,4MApDXC,MAAQ,CACJL,OAAQ,GACRM,YAAa,I,EAGjBC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAACH,YAAaE,EAAME,OAAOR,S,EAoB7CS,aAAe,WACX,OAAgC,IAA7B,EAAKN,MAAML,OAAOY,OACV,uCAEA,kBAAC,EAAD,CAAUZ,OAAQ,EAAKa,kB,EAItCA,aAAe,WAIX,OAHkB,EAAKR,MAAML,OAAOc,QAAO,SAAAZ,GACvC,OAAOA,EAAML,KAAKkB,cAAcC,SAAS,EAAKX,MAAMC,YAAYS,mB,kEA3BpD,IAAD,OACfE,MAAM,8CACDC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAG,GACF,IAAIC,EAAYD,EAAKpB,KAAI,SAAAC,GACrB,MACI,CACIN,GAAIM,EAAMN,GACVC,KAAMK,EAAML,KACZC,MAAOI,EAAMJ,UAIzB,EAAKW,SAAS,CAACT,OAAQsB,S,+BAoB/B,OACI,yBAAKjC,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWE,cAAegC,KAAKhB,eAC9BgB,KAAKZ,oB,GAhDJa,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ac618f4e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return(\r\n        <React.Fragment>\r\n            <h1>ROBOFRIENDS</h1>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport \"./SearchBox.css\";\r\n\r\nconst SearchBox = (props) => {\r\n    return(\r\n        <React.Fragment>\r\n            <input  type=\"text\" \r\n                    className=\"searchbox\"\r\n                    onChange={props.onInputChange}    \r\n                    placeholder=\"search Robots...\"    \r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport \"./Card.css\";\r\n\r\nconst Card = (props) => {\r\n    return(\r\n        <div className=\"card\">\r\n            <img alt=\"Robot\" src={`https://robohash.org/id${props.id}`} />\r\n            <p className=\"name\">{props.name}</p>\r\n            <p className=\"email\">{props.email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\nimport \"./CardList.css\";\r\n\r\nconst CardList = (props) => {\r\n    return(\r\n        <div className=\"card-list\">\r\n            {props.robots.map(value => {\r\n                return <Card key={value.id} name={value.name} email={value.email} id={value.id} />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\nimport './App.css';\nimport Header from \"../components/Header\";\nimport SearchBox from \"../components/SearchBox\";\nimport CardList from \"../components/CardList\";\n\nclass App extends React.Component{\n    \n    state = {\n        robots: [],\n        searchfield: \"\"\n    }\n\n    handleChange = (event) => {\n        this.setState({searchfield: event.target.value})\n    }\n\n    componentDidMount(){\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(result => result.json())\n            .then(data => {\n                let newRobots = data.map(value => {\n                    return (\n                        {\n                            id: value.id, \n                            name: value.name, \n                            email: value.email\n                        }\n                    );\n                })\n                this.setState({robots: newRobots});\n            })\n    }\n\n    renderRobots = () => {\n        if(this.state.robots.length === 0){\n            return <h1>Loading</h1>;\n        }else{\n            return <CardList robots={this.filterRobots()} />\n        }\n    }\n\n    filterRobots = () => {\n        const newRobots = this.state.robots.filter(value => {\n            return value.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\n        return newRobots;\n    }\n\n    render(){\n        return(\n            <div className=\"container\">\n                <Header />\n                <SearchBox onInputChange={this.handleChange} />\n                {this.renderRobots()}\n            </div>    \n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}